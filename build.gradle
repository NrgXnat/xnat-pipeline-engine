/*
 * pipeline: build.gradle
 * XNAT https://www.xnat.org
 * Copyright (c) 2021, Washington University School of Medicine
 * All Rights Reserved
 *
 * Released under the Simplified BSD.
 */

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id "java"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
}

group "org.nrg.xnat"
version = "1.8.9"

def id = "xnat-pipeline-${version}"

repositories {
    mavenLocal()
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-release" }
    maven { url "https://nrgxnat.jfrog.io/nrgxnat/libs-snapshot" }
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

String propertyWithDefault(String name, Object value) {
    hasProperty(name) ? property(name) : value
}

// Marshall all of the variables and properties.
def isWindows = Os.isFamily(Os.FAMILY_WINDOWS)

def source = buildDir.parent
def destination = file(propertyWithDefault("destination", "${buildFile.parent}/build/pipeline"))
def url = "${propertyWithDefault("xnatUrl", "http://localhost:8080").replaceAll("/+\$", "")}" as String
def email = "${propertyWithDefault("adminEmail", "admin@yourxnat.org")}" as String
def smtp = "${propertyWithDefault("smtpServer", "localhost")}" as String
def siteName = "${propertyWithDefault("siteName", "XNAT")}" as String
def pluginsDir = "${propertyWithDefault("pluginsDir", "")}" as String
def pluginsDirProd = "${propertyWithDefault("pluginsDirProd", "")}" as String

println """Building pipeline engine

 * From:        ${source}
 * To:          ${destination}
 * Email:       ${email}
 * Site name:   ${siteName}
 * Site URL:    ${url}
 * SMTP server: ${smtp}
 * Plugins dir: ${pluginsDir}
 * Plugins dir (prod): ${pluginsDirProd}
"""

def configExt = (isWindows ? "bat" : "config") as String
def demoScript = (isWindows ? "demo.bat" : "demo.sh") as String
def envVar1 = (isWindows ? "%" : "\$") as String
def envVar2 = (isWindows ? "%" : "") as String
def classpathSeparator = (isWindows ? ";" : ":") as String
def osArgSym = (isWindows ? "%*" : "\$@") as String
def platformCall = (isWindows ? "call" : "source") as String
def shellLine = (isWindows ? "@echo off" : "#!/bin/bash") as String

def pluginBeansJars = []
if ("${pluginsDir}" != "") {
    fileTree(dir: "${pluginsDir}", include: '**/*beans*.jar').each { File file ->
        if ("${pluginsDirProd}" != "") {
            pluginBeansJars.add file.path.replace("${pluginsDir}","${pluginsDirProd}")
        } else {
            pluginBeansJars.add file.path
        }
    }
}

def pluginsBeans = pluginBeansJars.size() > 0 ? classpathSeparator + pluginBeansJars.join(classpathSeparator) : ""

def tokens = [CONFIG_EXT           : configExt,
              CP_SEP               : classpathSeparator,
              OS_ARG_SYM           : osArgSym,
              PIPELINE_DIR_PATH    : "${destination}" as String,
              PLATFORM_CALL        : platformCall,
              PLATFORM_ENV_VAR1    : envVar1,
              PLATFORM_ENV_VAR2    : envVar2,
              SCRIPT_NAME          : demoScript,
              SHELL_LINE           : shellLine,
              XNAT_SITE_NAME       : siteName,
              YOUR_EMAIL_HERE      : email,
              YOUR_SMTP_SERVER_HERE: smtp,
              YOUR_XNAT_URL_HERE   : url,
              PLUGIN_BEANS         : pluginsBeans]

// Now get all of the script and resource folders.
def scripts = file("${source}/templates/scripts").exists() ? [file("${source}/templates/scripts")] : []
def resources = file("${source}/templates/resources").exists() ? [file("${source}/templates/resources")] : []
def binaries = file("${source}/templates/bin").exists() ? [file("${source}/templates/bin")] : []

def moduleRoots = file("${source}/modules").exists() ? [file("${source}/modules")] : []
if (hasProperty("modulePaths")) {
    "${modulePaths}".split(/\s*,\s*/).each { modulePath ->
        def path = file(modulePath)
        if (path.exists()) {
            println "Adding module root ${path}"
            moduleRoots.add path
        } else {
            println "The suggested module root ${path} does not exist, skipping."
        }
    }
}
println ""
moduleRoots.each { root ->
    root.eachDirMatch(~/^(?!\.).*/) { File module ->
        def folders = []
        module.eachDirMatch(~/resources/) { match ->
            folders.add match
        }
        module.eachDirMatch(~/scripts/) { match ->
            folders.add match
        }
        module.eachDirMatch(~/bin/) { match ->
            folders.add match
        }
        if (folders.size() == 0) {
            resources.add module
        } else {
            folders.each { File folder ->
                if (folder.name.endsWith("resources")) {
                    resources.add folder
                } else if (folder.name.endsWith("scripts")) {
                    scripts.add folder
                } else if (folder.name.endsWith("bin")) {
                    binaries.add folder
                }
            }
        }
    }
}

println "Resource folders:"
resources.each { resource ->
    println " * ${resource.path}"
}
println "Script folders:"
scripts.each { script ->
    println " * ${script.path}"
}
println "Binary folders:"
binaries.each { binary ->
    println " * ${binary.path}"
}
println ""

dependencyManagement.imports {
    mavenBom("org.nrg:parent:${project.version}") {
        bomProperties([
                "commons-logging.version": "1.2",
                "httpcomponents-client.version": "4.3.3",
                "javassist.version": "3.20.0-GA"
        ])
    }
}
tokens.putAll(dependencyManagement.managedVersions)

dependencies {
    implementation("org.nrg.xnat:data-client") { transitive = false }
    implementation("org.nrg.xnat:xnat-data-models") { transitive = false }
    implementation("org.nrg.xdat:core") { transitive = false }
    implementation("org.nrg:framework") { transitive = false }
    implementation("org.nrg:mail") { transitive = false }
    implementation("org.nrg:pipelineBase") { transitive = false }
    implementation("org.nrg:pipelineWorkflow") { transitive = false }
    implementation("org.nrg:pipelineXNAT") { transitive = false }
    implementation("org.nrg.xnat.pipeline:pipeline-client") { transitive = false }
    implementation("org.nrg.xnat.pipeline:xnat-pipeline") { transitive = false }
    implementation("org.nrg.xnat.pipeline:xnat-tools") { transitive = false }
    implementation("org.nrg.xnat:plexiviewer") { transitive = false }
    implementation("org.nrg.xnat.pipeline:imagingtools") { transitive = false }
    implementation("org.nrg.xnat:xnatsrb") { transitive = false }
    implementation("org.nrg:DicomImageUtils") { transitive = false }
    implementation("org.springframework:spring-web") { transitive = false }
    implementation("org.springframework:spring-core") { transitive = false }
    implementation("org.springframework:spring-aop") { transitive = false }
    implementation("org.springframework:spring-beans") { transitive = false }
    implementation("org.springframework:spring-context") { transitive = false }
    implementation("commons-configuration:commons-configuration") { transitive = false }
    implementation("commons-collections:commons-collections") { transitive = false }
    implementation("commons-discovery:commons-discovery") { transitive = false }
    implementation("commons-httpclient:commons-httpclient") { transitive = false }
    implementation("commons-io:commons-io") { transitive = false }
    implementation("commons-lang:commons-lang") { transitive = false }
    implementation("commons-beanutils:commons-beanutils") { transitive = false }
    implementation("commons-codec:commons-codec") { transitive = false }
    implementation("commons-logging:commons-logging") { transitive = false }
    implementation("org.apache.commons:commons-email") { transitive = false }
    implementation("org.apache.commons:commons-lang3") { transitive = false }
    implementation("org.apache.commons:commons-text") { transitive = false }
    implementation("org.apache.httpcomponents:fluent-hc") { transitive = false }
    implementation("com.fasterxml.jackson.core:jackson-annotations") { transitive = false }
    implementation("com.fasterxml.jackson.core:jackson-core") { transitive = false }
    implementation("com.fasterxml.jackson.core:jackson-databind") { transitive = false }
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml") { transitive = false }
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate4") { transitive = false }
    implementation("org.apache.ant:ant") { transitive = false }
    implementation("org.nrg:config") { transitive = false }
    implementation("org.nrg:notify") { transitive = false }
    implementation("org.nrg:prefs") { transitive = false }
    implementation("org.springframework.security:spring-security-core") { transitive = false }
    implementation("com.google.guava:guava") { transitive = false }
    implementation("org.apache.httpcomponents:httpcore") { transitive = false }
    implementation("org.apache.httpcomponents:httpclient") { transitive = false }
    implementation("org.javassist:javassist") { transitive = false }
    implementation("org.dspace:jargon") { transitive = false }
    implementation("javax.xml:jaxrpc-api") { transitive = false }
    implementation("xalan:xalan") { transitive = false }
    implementation("javax.activation:activation") { transitive = false }
    implementation("axis:axis") { transitive = false }
    implementation("aopalliance:aopalliance") { transitive = false }
    implementation("org.reflections:reflections") { transitive = false }
    implementation("org.slf4j:slf4j-api") { transitive = false }
    implementation("org.slf4j:slf4j-log4j12") { transitive = false }
    implementation("org.slf4j:jul-to-slf4j") { transitive = false }
    implementation("log4j:log4j") { transitive = false }

    // These are old deprecated libraries that we"re carrying so we don"t break existing functionality.
    implementation("ant:ant:1.6.1") { transitive = false }
    implementation("com.jcraft:jsch:0.1.24") { transitive = false }
    implementation("commons-dbcp:commons-dbcp:1.2.1") { transitive = false }
    implementation("commons-pool:commons-pool:1.2") { transitive = false }
    implementation("javax.mail:mail:1.4.5") { transitive = false }
    implementation("net.sf.ezmorph:ezmorph:1.0.6") { transitive = false }
    implementation("net.sf.saxon:Saxon-B:9.0") { transitive = false }
    implementation("org.apache.httpcomponents:fluent-hc:4.2.3") { transitive = false }
    implementation("velocity:velocity:1.3.1") { transitive = false }
}

// Pulls in the Jenkins BUILD_NUMBER environment variable if available.
def buildDate = new Date()
def buildNumber = System.getenv().BUILD_NUMBER?.toInteger() ?: "Manual"

logger.info "Build-Date:             ${buildDate}"
logger.info "Build-Number:           ${buildNumber}"
logger.info "Implementation-Version: ${version}"

task buildArchive(type: Zip) {
    manifest {
        doFirst {
            delete fileTree(dir: projectDir, include: "*.mf", exclude: "${id}.mf")
        }
        attributes "Application-Name": "XNAT Pipeline Engine",
                "Build-Date": buildDate,
                "Build-Number": buildNumber,
                "Implementation-Version": project.version
        writeTo "${projectDir}/${id}.mf"
    }

    from("${projectDir}") {
        into "xnat-pipeline"
    }
    exclude "build/**"
    exclude "gradle.properties"
    exclude ".*"
    exclude ".*/**"
    archiveFileName = "${id}.zip"
    destinationDirectory = file("${buildDir}/libs")
}

task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into "${destination}/lib"
}

task copyResources(type: Copy) {
    from resources
    into destination
    exclude ".*/**"
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: tokens)
}

task copyScripts(type: Copy) {
    from scripts
    into destination
    exclude ".*/**"
    fileMode = 0755
    rename { String filename ->
        if (isWindows) {
            "${filename}.bat" as String
        } else {
            filename
        }
    }
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: tokens)
}

task copyBinaries(type: Copy) {
    from binaries
    into destination
    exclude ".*/**"
    fileMode = 0755
}

task copyLibs(type: Copy) {
    from "${source}/lib"
    into "${destination}/lib"
    exclude ".*/**"
}

task copyBuildInfo(type: Copy) {
    from "${source}"
    into "${destination}"
    include "${id}.mf"
}

task copyAll {
    dependsOn tasks.matching { Task task ->
        task instanceof Copy && task.name != "createDist"
    }
}

defaultTasks "copyAll"
